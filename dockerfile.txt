[37mAnalyzing quay.io/debezium/example-postgres:1.9
[0m[37mDocker Version: 
[0m[37mGraphDriver: overlay2
[0m[37mEnvironment Variables
[0m[33m|PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/postgresql/14/bin
[0m[33m|GOSU_VERSION=1.14
[0m[33m|LANG=en_US.utf8
[0m[33m|PG_MAJOR=14
[0m[33m|PG_VERSION=14.6-1.pgdg110+1
[0m[33m|PGDATA=/var/lib/postgresql/data
[0m[33m|POSTGIS_VERSION=3
[0m[37m
[0m[37mOpen Ports
[0m[32m|5432
[0m[37m
[0m[37mImage user
[0m[31m|User is root
[0m[37m
[0m[37mPotential secrets:
[0m[32m|Found match etc/ssl/private/ssl-cert-snakeoil.key openssl .key, apple .keychain, etc. \.key$ 6141d99aafa8ff4ebcae2cc02245ae1d7be4741eeffcff61c53481c5f6544d38/layer.tar
[0m[32m|Found match usr/local/share/keyrings/postgres.gpg.asc Potential cryptographic key bundle \.asc$ 75b2ea43ef010baa71bec021a439de7a076d418df07a5290920beeb5de1c06fa/layer.tar
[0m[32m|Found match docker-entrypoint-initdb.d/inventory.sql Database file \.sql$ ecaba0d214e976790247fd182cbb7551afe1a8811d6ea30c99888699ea97cff9/layer.tar
[0m[37mDockerfile:
[0m[32mCMD ["bash"]
[0m[32mRUN set -ex; if ! command -v gpg > /dev/null; then apt-get update; apt-get install -y --no-install-recommends gnupg dirmngr ; rm -rf /var/lib/apt/lists/*; fi
[0m[32mRUN set -eux; groupadd -r postgres --gid=999; useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; mkdir -p /var/lib/postgresql; chown -R postgres:postgres /var/lib/postgresql
[0m[32mENV GOSU_VERSION=1.14
[0m[32mRUN set -eux; savedAptMark="$(apt-mark showmanual)"; apt-get update; apt-get install -y --no-install-recommends ca-certificates wget; rm -rf /var/lib/apt/lists/*; dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; export GNUPGHOME="$(mktemp -d)"; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; gpgconf --kill all; rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; apt-mark auto '.*' > /dev/null; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; chmod +x /usr/local/bin/gosu; gosu --version; gosu nobody true
[0m[32mRUN set -eux; if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; fi; apt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
[0m[32mENV LANG=en_US.utf8
[0m[32mRUN set -eux; apt-get update; apt-get install -y --no-install-recommends libnss-wrapper xz-utils zstd ; rm -rf /var/lib/apt/lists/*
[0m[32mRUN mkdir /docker-entrypoint-initdb.d
[0m[32mRUN set -ex; key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; export GNUPGHOME="$(mktemp -d)"; mkdir -p /usr/local/share/keyrings/; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; gpg --batch --export --armor "$key" > /usr/local/share/keyrings/postgres.gpg.asc; command -v gpgconf > /dev/null  \
	&& gpgconf --kill all; rm -rf "$GNUPGHOME"
[0m[32mENV PG_MAJOR=14
[0m[32mENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/postgresql/14/bin
[0m[32mENV PG_VERSION=14.6-1.pgdg110+1
[0m[32mRUN set -ex; export PYTHONDONTWRITEBYTECODE=1; dpkgArch="$(dpkg --print-architecture)"; aptRepo="[ signed-by=/usr/local/share/keyrings/postgres.gpg.asc ] http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main $PG_MAJOR"; case "$dpkgArch" in amd64 | arm64 | ppc64el) echo "deb $aptRepo" > /etc/apt/sources.list.d/pgdg.list; apt-get update; ;; *) echo "deb-src $aptRepo" > /etc/apt/sources.list.d/pgdg.list; savedAptMark="$(apt-mark showmanual)"; tempDir="$(mktemp -d)"; cd "$tempDir"; apt-get update; apt-get install -y --no-install-recommends dpkg-dev; echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list; _update_repo() { dpkg-scanpackages . > Packages; apt-get -o Acquire::GzipIndexes=false update; }; _update_repo; nproc="$(nproc)"; export DEB_BUILD_OPTIONS="nocheck parallel=$nproc"; apt-get build-dep -y postgresql-common pgdg-keyring; apt-get source --compile postgresql-common pgdg-keyring; _update_repo; apt-get build-dep -y "postgresql-$PG_MAJOR=$PG_VERSION"; apt-get source --compile "postgresql-$PG_MAJOR=$PG_VERSION"; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark; ls -lAFh; _update_repo; grep '^Package: ' Packages; cd /; ;; esac; apt-get install -y --no-install-recommends postgresql-common; sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf; apt-get install -y --no-install-recommends "postgresql-$PG_MAJOR=$PG_VERSION" ; rm -rf /var/lib/apt/lists/*; if [ -n "$tempDir" ]; then apt-get purge -y --auto-remove; rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; fi; find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +; postgres --version
[0m[32mRUN set -eux; dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample"; cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/"; sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample; grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
[0m[32mRUN mkdir -p /var/run/postgresql  \
	&& chown -R postgres:postgres /var/run/postgresql  \
	&& chmod 2777 /var/run/postgresql
[0m[32mENV PGDATA=/var/lib/postgresql/data
[0m[32mRUN mkdir -p "$PGDATA"  \
	&& chown -R postgres:postgres "$PGDATA"  \
	&& chmod 777 "$PGDATA"
[0m[32mVOLUME [/var/lib/postgresql/data]
[0m[32mCOPY file:925d466681c8349f58385c00a8caa567c76b695158aa04bf4ad2ac92604e11c7 in /usr/local/bin/
[0m[32m	usr/
[0m[32m	usr/local/
[0m[32m	usr/local/bin/
[0m[32m	usr/local/bin/docker-entrypoint.sh
[0m[32m
[0m[32mENTRYPOINT ["docker-entrypoint.sh"]
[0m[32mSTOPSIGNAL SIGINT
[0m[32mEXPOSE 5432
[0m[32mCMD ["postgres"]
[0m[32mLABEL maintainer=Debezium Community
[0m[32mENV POSTGIS_VERSION=3
[0m[32mRUN RUN apt-get update  \
	&& apt-get install -f -y --no-install-recommends software-properties-common  \
	&& if [ "$USE_POSTGIS" != "false" ]; then apt-get install -f -y --no-install-recommends postgresql-$PG_MAJOR-postgis-$POSTGIS_VERSION postgresql-$PG_MAJOR-postgis-$POSTGIS_VERSION-scripts postgis; fi  \
	&& add-apt-repository "deb http://ftp.debian.org/debian testing main contrib"  \
	&& apt-get update  \
	&& apt-get install -f -y --no-install-recommends libprotobuf-c1  \
	&& rm -rf /var/lib/apt/lists/* # buildkit
[0m[32mCOPY /usr/lib/postgresql/14/lib/decoderbufs.so /usr/lib/postgresql/14/lib/wal2json.so /usr/lib/postgresql/14/lib/ # buildkit
[0m[32m	usr/
[0m[32m	usr/lib/
[0m[32m	usr/lib/postgresql/
[0m[32m	usr/lib/postgresql/14/
[0m[32m	usr/lib/postgresql/14/lib/
[0m[32m	usr/lib/postgresql/14/lib/decoderbufs.so
[0m[32m	usr/lib/postgresql/14/lib/wal2json.so
[0m[32m
[0m[32mCOPY /usr/share/postgresql/14/extension/decoderbufs.control /usr/share/postgresql/14/extension/ # buildkit
[0m[32m	usr/
[0m[32m
[0m[32mCOPY postgresql.conf.sample /usr/share/postgresql/postgresql.conf.sample # buildkit
[0m[32m	usr/
[0m[32m
[0m[32mCOPY /docker-entrypoint-initdb.d /docker-entrypoint-initdb.d # buildkit
[0m[32m	docker-entrypoint-initdb.d/
[0m[32m	docker-entrypoint-initdb.d/init-permissions.sh
[0m[32m
[0m[32mLABEL maintainer=Debezium Community
[0m[32mCOPY inventory.sql /docker-entrypoint-initdb.d/ # buildkit
[0m[32m	docker-entrypoint-initdb.d/
[0m[32m	docker-entrypoint-initdb.d/inventory.sql
[0m[32m
[0m[37m
[0m